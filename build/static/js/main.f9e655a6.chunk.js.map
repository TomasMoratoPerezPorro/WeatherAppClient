{"version":3,"sources":["services/DailyWeatherService.js","services/HourlyWeatherService.js","services/SearchCityService.js","assets/icons/search.svg","components/layout/Navbar.js","components/layout/CityPill.js","components/sections/CitySelector.js","assets/ilustration/hiker-man-colour.svg","assets/weatherIcons/cloud1.svg","assets/weatherIcons/lightning1.svg","assets/weatherIcons/moon.svg","assets/weatherIcons/moonCloud2.svg","assets/weatherIcons/rain1.svg","assets/weatherIcons/rain2.svg","assets/weatherIcons/snow1.svg","assets/weatherIcons/sun.svg","assets/weatherIcons/sunCloud1.svg","assets/weatherIcons/sunCloud2.svg","assets/icons/errorOutline.svg","utils/setIcon.js","components/layout/MainCard.js","components/layout/Separator.js","components/sections/MainWeather.js","components/layout/HourlyCrad.js","components/layout/HourlyCardList.js","components/sections/HourlyForecast.js","components/layout/DailyCard.js","components/layout/DailyCardList.js","components/sections/DailyForecast.js","App.js","index.js"],"names":["fetchDailyForecastData","cityId","a","fetch","mode","res","json","data","fetchHourlyForecastData","fetchCitiesData","search","method","Navbar","onSearch","useState","text","setText","undefined","timer","setTimer","useEffect","clearTimeout","setTimeout","length","className","href","onSubmit","e","preventDefault","alert","type","placeholder","value","onChange","target","src","searchIcon","alt","CityPill","name","onClick","_id","CitySelector","citiesData","loading","onSelect","city","listItems","cities","map","CircularProgress","setIcon","iconCode","iconSVG","cloud1","lightning1","moon","moonCloud2","rain1","rain2","snow1","sun","sunCloud1","sunCloud2","errorOutline","MainCard","today","dailyForecast","weatherStatus","icon","description","format","date","temperature","maxTemperature","Separator","heading","subheading","MainWeather","dailyForecastData","cityName","heroIlustration","WeeklyForecast","HourlyCrad","hour","HourlyCardList","halfDayForecast","day","hourlyForecast","startDateTime","HourlyForecast","hourlyForecastData","DailyCard","minTemperature","DailyCardList","weeklyForecast","DailyForecast","defaultCityList","__v","App","loadingDailyForecast","setLoadingDailyForecast","loadingHourlyForecast","setLoadingHourlyForecast","setDailyForecastData","setHourlyForecastData","selectedCity","setselectedCity","loadingCityPills","setloadingCityPills","cityPills","setCityPills","getDailyForecastData","DailyWeatherService","dailyWeatherFromServer","getHourlyForecastData","HourlyWeatherService","hourlyWeatherFromServer","selectCity","searchCity","SearchCityService","citiesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9e655a6.chunk.js","sourcesContent":["const fetchDailyForecastData = async (cityId) => {\r\n  const res = await fetch(\r\n    `https://dry-shelf-70670.herokuapp.com/api/weather/daily/city/${cityId}`,\r\n    { mode: 'cors' }\r\n  );\r\n  const data = await res.json();\r\n  return data;\r\n};\r\n\r\nexport default { fetchDailyForecastData };\r\n","const fetchHourlyForecastData = async (cityId) => {\r\n  const res = await fetch(\r\n    `https://dry-shelf-70670.herokuapp.com/api/weather/hourly/city/${cityId}`,\r\n    { mode: 'cors' }\r\n  );\r\n  const data = await res.json();\r\n  return data;\r\n};\r\n\r\nexport default { fetchHourlyForecastData };\r\n","const fetchCitiesData = async (search) => {\r\n  const res = await fetch(\r\n    `https://dry-shelf-70670.herokuapp.com/api/cities/${search}`,\r\n    {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n    }\r\n  );\r\n  const data = await res.json();\r\n  return data;\r\n};\r\n\r\nexport default { fetchCitiesData };\r\n","export default __webpack_public_path__ + \"static/media/search.722f5ec8.svg\";","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport searchIcon from '../../assets/icons/search.svg';\r\n\r\nconst Navbar = ({ onSearch }) => {\r\n  const [text, setText] = useState('');\r\n  const [timer, setTimer] = useState(undefined);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!text) {\r\n      alert('Please add some text');\r\n      return;\r\n    }\r\n\r\n    onSearch({ text });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n    }\r\n    setTimer(\r\n      setTimeout(() => {\r\n        if (text.length > 0) {\r\n          onSearch({ text });\r\n        }\r\n      }, 1000)\r\n    );\r\n  }, [text]);\r\n\r\n  const changeText = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <header className='header'>\r\n      <nav className='area-topBar'>\r\n        <a href='' className='logo-text'>\r\n          International Weather\r\n        </a>\r\n        <form onSubmit={onSubmit} className='searchBar'>\r\n          <input\r\n            type='text'\r\n            className='searchBar__input'\r\n            placeholder='Busca Tu Ciudad...'\r\n            value={text}\r\n            onChange={changeText}\r\n          />\r\n          <button type='submit' className='searchBar__button'>\r\n            <img className='searchBar__icon' src={searchIcon} alt='search' />\r\n          </button>\r\n        </form>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst CityPill = ({ name, onClick, cityId }) => {\r\n  const onSend = (e) => {\r\n    e.preventDefault();\r\n    const city = {\r\n      _id: cityId,\r\n      name: name,\r\n    };\r\n    onClick(city);\r\n  };\r\n\r\n  return (\r\n    <button className='cities-suggestion__item' onClick={onSend}>\r\n      <p>{name}</p>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CityPill;\r\n","import React from 'react';\r\nimport CityPill from '../layout/CityPill';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nconst defaultCityList = {\r\n  cities: [\r\n    {\r\n      _id: '6058a533e3a0925130bd12ec',\r\n      name: 'Barcelona',\r\n      __v: 0,\r\n    },\r\n    {\r\n      _id: '605ca85ae2df18249c4607dc',\r\n      name: 'Bahamas',\r\n      __v: 0,\r\n    },\r\n  ],\r\n};\r\n\r\nconst CitySelector = ({ citiesData, loading, onSelect }) => {\r\n  const onClick = (city) => {\r\n    onSelect(city);\r\n  };\r\n\r\n  const listItems = citiesData.cities.map((city) => {\r\n    return (\r\n      <CityPill\r\n        key={city._id}\r\n        name={city.name}\r\n        cityId={city._id}\r\n        onClick={onClick}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className='cities-suggestion'>\r\n      {loading === true ? <CircularProgress /> : listItems}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CitySelector;\r\n","export default __webpack_public_path__ + \"static/media/hiker-man-colour.8e88f095.svg\";","export default __webpack_public_path__ + \"static/media/cloud1.3e3d32b0.svg\";","export default __webpack_public_path__ + \"static/media/lightning1.6b6e326f.svg\";","export default __webpack_public_path__ + \"static/media/moon.5c79f519.svg\";","export default __webpack_public_path__ + \"static/media/moonCloud2.ac4e6368.svg\";","export default __webpack_public_path__ + \"static/media/rain1.68ee65f9.svg\";","export default __webpack_public_path__ + \"static/media/rain2.66d5c6dc.svg\";","export default __webpack_public_path__ + \"static/media/snow1.dfe4399f.svg\";","export default __webpack_public_path__ + \"static/media/sun.b97e9b81.svg\";","export default __webpack_public_path__ + \"static/media/sunCloud1.419f4b2b.svg\";","export default __webpack_public_path__ + \"static/media/sunCloud2.562e5e09.svg\";","export default __webpack_public_path__ + \"static/media/errorOutline.a85971da.svg\";","//ICONS\r\nimport cloud1 from '../assets/weatherIcons/cloud1.svg';\r\nimport lightning1 from '../assets/weatherIcons/lightning1.svg';\r\nimport moon from '../assets/weatherIcons/moon.svg';\r\nimport moonCloud1 from '../assets/weatherIcons/moonCloud2.svg';\r\nimport moonCloud2 from '../assets/weatherIcons/moonCloud2.svg';\r\nimport rain1 from '../assets/weatherIcons/rain1.svg';\r\nimport rain2 from '../assets/weatherIcons/rain2.svg';\r\nimport snow1 from '../assets/weatherIcons/snow1.svg';\r\nimport sun from '../assets/weatherIcons/sun.svg';\r\nimport sunCloud1 from '../assets/weatherIcons/sunCloud1.svg';\r\nimport sunCloud2 from '../assets/weatherIcons/sunCloud2.svg';\r\nimport errorOutline from '../assets/icons/errorOutline.svg';\r\n\r\nconst setIcon = (iconCode) => {\r\n  let iconSVG;\r\n  switch (iconCode) {\r\n    case 'cloud-1':\r\n      iconSVG = cloud1;\r\n      break;\r\n    case 'lightning-1':\r\n      iconSVG = lightning1;\r\n      break;\r\n    case 'moon':\r\n      iconSVG = moon;\r\n      break;\r\n    case 'moon-cloud-1':\r\n      iconSVG = moonCloud1;\r\n      break;\r\n    case 'moon-cloud-2':\r\n      iconSVG = moonCloud2;\r\n      break;\r\n    case 'rain-1':\r\n      iconSVG = rain1;\r\n      break;\r\n    case 'rain-2':\r\n      iconSVG = rain2;\r\n      break;\r\n    case 'snow-1':\r\n      iconSVG = snow1;\r\n      break;\r\n    case 'snow-2':\r\n      iconSVG = snow1;\r\n      break;\r\n    case 'sun':\r\n      iconSVG = sun;\r\n      break;\r\n    case 'sun-cloud-1':\r\n      iconSVG = sunCloud1;\r\n      break;\r\n    case 'sun-cloud-2':\r\n      iconSVG = sunCloud2;\r\n      break;\r\n    case 'error-outline':\r\n      iconSVG = errorOutline;\r\n      break;\r\n\r\n    default:\r\n      iconSVG = errorOutline;\r\n      break;\r\n  }\r\n  return iconSVG;\r\n};\r\n\r\nexport default setIcon;\r\n","import React, { Fragment } from 'react';\r\nimport setIcon from '../../utils/setIcon';\r\nimport Moment from 'react-moment';\r\n\r\nconst MainCard = ({ today }) => {\r\n  if (today.dailyForecast === undefined) {\r\n    return (\r\n      <Fragment>\r\n        <h1>No weather Data for today</h1>\r\n      </Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <Fragment>\r\n        <img\r\n          src={setIcon(today.dailyForecast.weatherStatus.icon)}\r\n          alt='Cloudy'\r\n          className='heroWeather__icon'\r\n        />\r\n        <h3 className='heroWeather__weatherName text-color black medium'>\r\n          {today.dailyForecast.weatherStatus.description}\r\n        </h3>\r\n        <p className='heroWeather__todayDate text-color light-4'>\r\n          <Moment format='dddd DD MMMM'>{today.date}</Moment>\r\n        </p>\r\n        <h1 className='heroWeather__temperature x-large text-color black'>\r\n          {today.dailyForecast.temperature.maxTemperature}\r\n        </h1>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MainCard;\r\n","import React from 'react';\r\n\r\nconst Separator = ({ heading, subheading }) => {\r\n  return (\r\n    <div className='separator-heading'>\r\n      <h2 className='separator-heading__text heading'>{heading}</h2>\r\n      <h3 className='separator-heading__text subheading'>{subheading}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Separator;\r\n","import { CircularProgress } from '@material-ui/core';\r\nimport React, { Fragment } from 'react';\r\nimport heroIlustration from '../../assets/ilustration/hiker-man-colour.svg';\r\nimport MainCard from '../layout/MainCard';\r\nimport Separator from '../layout/Separator';\r\n\r\nconst MainWeather = ({ loading, dailyForecastData, cityName }) => {\r\n  return (\r\n    <Fragment>\r\n      <Separator heading={cityName} />\r\n      <div className='area-heroWeather'>\r\n        <div className='heroWeather'>\r\n          <div className='heroWeather ilustration'>\r\n            <img\r\n              src={heroIlustration}\r\n              alt='Cloudy'\r\n              className='heroWeather__ilustration'\r\n            />\r\n          </div>\r\n\r\n          <div className='heroWeather info'>\r\n            {loading === true ? (\r\n              <CircularProgress />\r\n            ) : (\r\n              <MainCard today={dailyForecastData.WeeklyForecast[0]} />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default MainWeather;\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\n\r\nconst HourlyCrad = ({ hour, temperature, icon }) => {\r\n  return (\r\n    <div className='detailedWeatherCard'>\r\n      <p className='detailedWeatherCard__hour'>\r\n        <Moment format='HH:mm'>{hour}</Moment>\r\n      </p>\r\n      <img\r\n        className='detailedWeatherCard__icon'\r\n        src={/* `../../assets/weatherIcons/${icon.toString()}.svg` */ icon}\r\n        alt='search'\r\n      />\r\n      <p className='detailedWeatherCard__temperature'>{temperature}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HourlyCrad;\r\n","import React from 'react';\r\nimport HourlyCrad from './HourlyCrad';\r\nimport setIcon from '../../utils/setIcon';\r\n\r\nconst HourlyCardList = ({ halfDayForecast }) => {\r\n  const listItems = halfDayForecast.map((day) => {\r\n    if (day.hourlyForecast) {\r\n      return (\r\n        <HourlyCrad\r\n          key={day.hourlyForecast._id}\r\n          hour={day.hourlyForecast.startDateTime}\r\n          temperature={day.hourlyForecast.temperature}\r\n          icon={setIcon(day.hourlyForecast.weatherStatus.icon)}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <HourlyCrad\r\n          key={day.date}\r\n          hour={day.date}\r\n          temperature={'No weather Data'}\r\n          icon={setIcon('error-outline')}\r\n        />\r\n      );\r\n    }\r\n  });\r\n  return <div className='detailedWeatherView__row'>{listItems}</div>;\r\n};\r\n\r\nexport default HourlyCardList;\r\n","import React, { Fragment } from 'react';\r\nimport Separator from '../layout/Separator';\r\nimport HourlyCardList from '../layout/HourlyCardList';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nconst HourlyForecast = ({ loading, hourlyForecastData }) => {\r\n  return (\r\n    <Fragment>\r\n      <Separator heading='Today' subheading='Next 24 hours' />\r\n      <div className='area-detailedWeatherView'>\r\n        <div className='detailedWeatherView'>\r\n          {loading === true ? (\r\n            <CircularProgress />\r\n          ) : (\r\n            <HourlyCardList\r\n              halfDayForecast={hourlyForecastData.halfDayForecast}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HourlyForecast;\r\n","import React from 'react';\r\nimport Moment from 'react-moment';\r\n\r\nconst DailyCard = ({ icon, date, maxTemperature, minTemperature }) => {\r\n  return (\r\n    <div className='weekForecastCard'>\r\n      <img className='weekForecastCard__icon' src={icon} alt='search' />\r\n      <h3 className='weekForecastCard__date'>\r\n        <Moment format='dddd DD MMMM'>{date}</Moment>\r\n      </h3>\r\n      <div className='weekForecastCard-temperature'>\r\n        <p className='weekForecastCard-temperature__min'>{maxTemperature}</p>\r\n        <p className='weekForecastCard-temperature__max'>{minTemperature}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyCard;\r\n","import React from 'react';\r\nimport DailyCard from '../layout/DailyCard';\r\nimport setIcon from '../../utils/setIcon';\r\n\r\nconst DailyCardList = ({ weeklyForecast }) => {\r\n  const listItems = weeklyForecast.map((day) => {\r\n    if (day.dailyForecast) {\r\n      return (\r\n        <DailyCard\r\n          key={day.dailyForecast._id}\r\n          icon={setIcon(day.dailyForecast.weatherStatus.icon)}\r\n          date={day.dailyForecast.date}\r\n          maxTemperature={day.dailyForecast.temperature.maxTemperature}\r\n          minTemperature={day.dailyForecast.temperature.minTemperature}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <DailyCard\r\n          key={day.date}\r\n          icon={setIcon('error-outline')}\r\n          date={day.date}\r\n          maxTemperature={'No weather Data'}\r\n          minTemperature={''}\r\n        />\r\n      );\r\n    }\r\n  });\r\n  return <div className='weekForecast'>{listItems}</div>;\r\n};\r\n\r\nexport default DailyCardList;\r\n","import React, { Fragment } from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport DailyCardList from '../layout/DailyCardList';\r\nimport Separator from '../layout/Separator';\r\n\r\nconst DailyForecast = ({ loading, dailyForecastData }) => {\r\n  return (\r\n    <Fragment>\r\n      <Separator heading='This Week' subheading='7 days prediction' />\r\n      <div className='area-weekForecast'>\r\n        {loading === true ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          <DailyCardList weeklyForecast={dailyForecastData.WeeklyForecast} />\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default DailyForecast;\r\n","import './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { Fragment } from 'react';\r\nimport DailyWeatherService from './services/DailyWeatherService';\r\nimport HourlyWeatherService from './services/HourlyWeatherService';\r\nimport SearchCityService from './services/SearchCityService';\r\nimport Navbar from './components/layout/Navbar';\r\nimport CitySelector from './components/sections/CitySelector';\r\nimport MainWeather from './components/sections/MainWeather';\r\nimport HourlyForecast from './components/sections/HourlyForecast';\r\nimport DailyForecast from './components/sections/DailyForecast';\r\n\r\nconst defaultCityList = {\r\n  cities: [\r\n    {\r\n      _id: '6058a533e3a0925130bd12ec',\r\n      name: 'Barcelona',\r\n      __v: 0,\r\n    },\r\n    {\r\n      _id: '605ca85ae2df18249c4607dc',\r\n      name: 'Bahamas',\r\n      __v: 0,\r\n    },\r\n  ],\r\n};\r\n\r\nfunction App() {\r\n  const [loadingDailyForecast, setLoadingDailyForecast] = useState(true);\r\n  const [loadingHourlyForecast, setLoadingHourlyForecast] = useState(true);\r\n  const [dailyForecastData, setDailyForecastData] = useState([]);\r\n  const [hourlyForecastData, setHourlyForecastData] = useState([]);\r\n  const [selectedCity, setselectedCity] = useState(defaultCityList.cities[0]);\r\n\r\n  const [loadingCityPills, setloadingCityPills] = useState(false);\r\n  const [cityPills, setCityPills] = useState(defaultCityList);\r\n\r\n  useEffect(() => {\r\n    const getDailyForecastData = async () => {\r\n      const dailyWeatherFromServer = await DailyWeatherService.fetchDailyForecastData(\r\n        selectedCity._id\r\n      );\r\n      setDailyForecastData(dailyWeatherFromServer);\r\n      setLoadingDailyForecast(false);\r\n    };\r\n\r\n    const getHourlyForecastData = async () => {\r\n      const hourlyWeatherFromServer = await HourlyWeatherService.fetchHourlyForecastData(\r\n        selectedCity._id\r\n      );\r\n      setHourlyForecastData(hourlyWeatherFromServer);\r\n      setLoadingHourlyForecast(false);\r\n    };\r\n\r\n    getDailyForecastData();\r\n    getHourlyForecastData();\r\n  }, [selectedCity]);\r\n\r\n  // Set selectedCity\r\n  const selectCity = async (city) => {\r\n    if (city !== selectedCity) {\r\n      setLoadingHourlyForecast(true);\r\n      setLoadingDailyForecast(true);\r\n      setselectedCity(city);\r\n    }\r\n  };\r\n\r\n  // Search City\r\n  const searchCity = async (city) => {\r\n    setloadingCityPills(true);\r\n    let search = city.text;\r\n    const citiesFromServer = await SearchCityService.fetchCitiesData(search);\r\n    setCityPills(citiesFromServer);\r\n    setloadingCityPills(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Navbar onSearch={searchCity} />\r\n      <CitySelector\r\n        citiesData={cityPills}\r\n        loading={loadingCityPills}\r\n        onSelect={selectCity}\r\n      />\r\n      <div className='container'>\r\n        <MainWeather\r\n          cityName={selectedCity.name}\r\n          loading={loadingDailyForecast}\r\n          dailyForecastData={dailyForecastData}\r\n        />\r\n        <HourlyForecast\r\n          loading={loadingHourlyForecast}\r\n          hourlyForecastData={hourlyForecastData}\r\n        />\r\n        <DailyForecast\r\n          loading={loadingDailyForecast}\r\n          dailyForecastData={dailyForecastData}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}